@page "/chatroom"
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@*@inject Blazor.Extensions.Storage.LocalStorage localStorage;*@
@using System.Net
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client;
@using Bliar.Hubs;

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    [Inject]
    public CookiesProvider CookiesProvider { get; set; }


    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;



            var authState = await authenticationStateTask;
            var user = authState.User;




            _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

            //var connection = new HubConnectionBuilder()
            //    .WithUrl("https://example.com/chathub", options =>
            //    {
            //        //options.AccessTokenProvider = () => Task.FromResult(_myAccessToken);
            //    })
            //    .Build();

            //localStorage.GetItem(".AspNetCore.Identity.Application");
            await localStorage.SetItemAsync("name", "John Smith");
            var name = await localStorage.GetItemAsync<string>("name");


            //var asqd = await localStorage.LengthAsync();
            //var c1 = await localStorage.GetItemAsStringAsync(".AspNetCore.Identity.Application");
            //var cookie = await localStorage.GetItemAsync<string>(".AspNetCore.Identity.Application");
            //var c2 = new System.Net.Cookie(".AspNetCore.Identity.Application", "CfDJ8MpVAyN4rr1Gk3YmsDowUFRNYN7C-uM5apfNbCpRvAOWsM9uGGyKbWiaW7AgPoetMyzh2BnMFe4u6QaSFJsGZiyjxpor1_FAZ8_tsAhf0Y3Qco6x7Ewv8XUGWv15L_BBHbkkmGbV6VW38BwNVl2EY2cXaJFG6IT0PmdY1Prmpv7-fLDFZmWf7vWEEnU-CNbsWQkguLXoTCa5_SNWBL7etavmSK5cP7s201DDf156BjzUflhdDKZdE9IDgxJKTKATSAezcFVZ6QHp8atTt3w1P-tQBfsZmIlp6ADPAz0UkzFcP4DMB8G-05aKNUs-WMUs_pvi8mDzrALW6pqBbvvuvNDT32uk43ClDVVrKIFjslNGnNYsR_JL3wUytB9U1RCgqeodF6TeQb1DAh5JkQ_AZ-aYoQ1vv2lP4PVqPigAjSl0mJL9fCrmJ-gKi-ag1MFLUJTMjf8L17ErJO7qOgQfOg96WLU5i1tttqBJtVUgCJhaxuZUvz9v85K0xfcUoicjT9I9MzLVGYwvQ36nhgEi32de8tGhHV3ervWiCMlWoKk6fhKyLXtgBcK0Ro3AhO07zZbQ8AtBr2q4fm58iULULaiuMtpot5nKEBWdui5YNugIQKMY-ZDuOoY7kTU7ENdjKu5ifniHv7GNlciSgAiwGQxBG7xno_7VSmNdMj2QvlUv7mU24Ofs7HOJfEdd9Ygn8tLhL7IkhZGpVlvMWccQBVdBSnvJ0CkTswkrtNPmCFEZ")
            //{
            //    Domain = "localhost"
            //};
            var container = new CookieContainer();
            var cookie = new Cookie()
            {
                Name = ".AspNetCore.Identity.Application",
                Domain = "localhost",
                Value = CookiesProvider.Cookie
            };

            container.Add(cookie);

            _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl, options => { options.Cookies = container; })
            .Build();
            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(name, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            await _hubConnection.SendAsync("Broadcast", user.Identity.Name, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
